{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","newTodos","updateTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMA4DeA,MA1Df,SAAkBC,GAAQ,IAAD,EACKC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAD9C,mBACdC,EADc,KACPC,EADO,KAGfC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAatB,OACI,sBAAMW,UAAU,YAAYC,SAXX,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAEVC,EAAS,KAIT,SACCL,EAAME,KACH,qCAEA,uBACAoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EAAOoB,KAAK,OACnBV,UAAU,kBACVW,SAAUd,EACVe,IAAKpB,IAEL,wBAAQQ,UAAU,mBAAlB,uBAGA,qCACC,uBACDQ,KAAK,OACLC,YAAY,aACZpB,MAAOC,EAAOoB,KAAK,OACnBV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,IAIL,wBAAQQ,UAAU,cAAlB,4B,eCNGa,MAzCf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAAa,EACjC9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAH8C,mBAClDD,EADkD,KAC5C8B,EAD4C,KAczD,OAAG9B,EAAKe,GACG,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QASRyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKrB,UAAWoB,EAAKE,WACnB,oBACA,WAFF,UAIA,qBAAmBC,QAAS,kBAAKR,EAAcK,EAAKjB,KAApD,SACKiB,EAAKb,MADAa,EAAKjB,IAGX,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CACIuB,QAAS,kBAAMP,EAAWI,EAAKjB,KAC/BH,UAAU,gBAEd,cAAC,IAAD,CACAuB,QAAS,kBAAML,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QAC7CP,UAAU,mBAZHqB,OC0BZG,MAjDf,WAAqB,IAAD,EACSrC,mBAAS,IADlB,mBACV2B,EADU,KACHW,EADG,KAsChB,OACI,gCACI,4DACA,cAAC,EAAD,CAAUxB,SAtCD,SAAAmB,GACb,GAAIA,EAAKb,KAAT,CAGA,IAAMmB,EAAQ,CAAIN,GAAJ,mBAAaN,IAE3BW,EAASC,OAiCL,cAAC,EAAD,CAAMZ,MAAOA,EAAOC,aAdP,SAAAZ,GACjB,IAAIwB,EAAcb,EAAMK,KAAI,SAAAC,GAIxB,OAHGA,EAAKjB,KAAOA,IACXiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASE,IAO2CX,WApBrC,SAAAb,GACf,IAAMyB,EAAY,YAAId,GAAOe,QAAO,SAAAT,GAAI,OAAIA,EAAKjB,KAAOA,KAExDsB,EAASG,IAkBJX,WA9BU,SAACa,EAAQC,GACpBA,EAASxB,MAGbkB,GAAS,SAAAO,GAAI,OAAIA,EAAKb,KAAI,SAAAc,GAAI,OAAIA,EAAK9B,KAAO2B,EACxCC,EAAUE,eCTTC,MARf,WACE,OACE,qBAAKlC,UAAU,WAAf,SACE,cAAC,EAAD,OCHNmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.83d5e59d.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    const hadnleSubmit = e => {\r\n        e.preventDefault();\r\n       \r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        }) \r\n        setInput('')\r\n    };\r\n\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={hadnleSubmit}>\r\n        {props.edit ? ( \r\n            <>\r\n\r\n            <input \r\n            type=\"text\" \r\n            placeholder=\"Update your item\" \r\n            value={input} name='text' \r\n            className='todo-input edit' \r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n            />\r\n            <button className='todo-button edit'>Update</button>\r\n            </>\r\n            ) :\r\n            <>\r\n             <input \r\n            type=\"text\" \r\n            placeholder=\"Add a todo\" \r\n            value={input} name='text' \r\n            className='todo-input' \r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n            />\r\n\r\n            \r\n            <button className='todo-button'>Add todo</button>\r\n            </>\r\n            }\r\n           \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport {RiCloseCircleLine} from 'react-icons/ri'\r\nimport {TiEdit} from 'react-icons/ti'\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        });\r\n    };\r\n\r\n    if(edit.id){\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n\r\n\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete \r\n        ? 'todo-row complete'\r\n        : 'todo-row'} key={index}>\r\n\r\n        <div key={todo.id} onClick={()=> completeTodo( todo.id )}>\r\n            {todo.text}\r\n        </div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine \r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className='delete-icon'\r\n                />\r\n                <TiEdit\r\n                onClick={() => setEdit({id: todo.id, value: todo.text})}\r\n                    className='edit-icon'\r\n                />\r\n            </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\n\r\nfunction TodoList() {\r\n    const[todos, setTodos] = useState([]);\r\n\r\n    const addTodo  = todo => {\r\n        if(!todo.text ){\r\n            return;\r\n        }\r\n        const newTodos = [todo, ...todos]\r\n\r\n        setTodos(newTodos);\r\n\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if(!newValue.text ){\r\n            return;\r\n        }\r\n        setTodos(prev => prev.map(item =>(item.id === todoId \r\n            ? newValue: item))\r\n        );\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n\r\n        setTodos(removeArr)\r\n    }\r\n\r\n    const completeTodo = id => {\r\n        let updateTodos = todos.map(todo => {\r\n            if(todo.id === id){\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo\r\n        })\r\n        setTodos(updateTodos);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>What`s the Plan for Today?</h1>\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo}\r\n             updateTodo={updateTodo}   \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList\r\n","\nimport './App.css';\nimport TodoList from './components/TodoList';\n\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}